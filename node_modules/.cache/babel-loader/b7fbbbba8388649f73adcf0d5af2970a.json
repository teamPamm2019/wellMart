{"ast":null,"code":"var _jsxFileName = \"/Users/miguelgalarraga/googlemapreact/src/App.js\";\nimport React, { useState, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\"; // We will use these things from the lib\n// https://react-google-maps-api-docs.netlify.com/\n\nimport { useLoadScript, GoogleMap, Marker, InfoWindow } from \"@react-google-maps/api\";\n\nfunction App() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [center, setCenter] = useState({\n    lat: 44.076613,\n    lng: -98.362239833\n  });\n  const [zoom, setZoom] = useState(5);\n  const [clickedLatLng, setClickedLatLng] = useState(null);\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key\n    googleMapsApiKey: \"\"\n  }); // The places I want to create markers for.\n  // This could be a data-driven prop.\n\n  const myPlaces = [{\n    id: \"place1\",\n    pos: {\n      lat: 39.09366509575983,\n      lng: -94.58751660204751\n    }\n  }, {\n    id: \"place2\",\n    pos: {\n      lat: 39.10894664788252,\n      lng: -94.57926449532226\n    }\n  }, {\n    id: \"place3\",\n    pos: {\n      lat: 39.07602397235644,\n      lng: -94.5184089401211\n    }\n  }]; // Iterate myPlaces to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myPlaces.map(place => {\n      bounds.extend(place.pos);\n      return place.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, place) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [place.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which place was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 13) {\n      setZoom(13);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const renderMap = () => {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(GoogleMap // Do stuff on map initial laod\n    , {\n      onLoad: loadHandler // Save the current center position in state\n      ,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n      ,\n      onClick: e => setClickedLatLng(e.latLng.toJSON()),\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: {\n        height: \"70vh\",\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, myPlaces.map(place => React.createElement(Marker, {\n      key: place.id,\n      position: place.pos,\n      onLoad: marker => markerLoadHandler(marker, place),\n      onClick: event => markerClickHandler(event, place) // Not required, but if you want a custom icon:\n      ,\n      icon: {\n        path: \"M12.75 0l-2.25 2.25 2.25 2.25-5.25 6h-5.25l4.125 4.125-6.375 8.452v0.923h0.923l8.452-6.375 4.125 4.125v-5.25l6-5.25 2.25 2.25 2.25-2.25-11.25-11.25zM10.5 12.75l-1.5-1.5 5.25-5.25 1.5 1.5-5.25 5.25z\",\n        fillColor: \"#0000ff\",\n        fillOpacity: 1.0,\n        strokeWeight: 0,\n        scale: 1.25\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), infoOpen && selectedPlace && React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.id],\n      onCloseClick: () => setInfoOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, selectedPlace.id), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"This is your info window content\")))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Center \", center.lat, \", \", center.lng), clickedLatLng && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"You clicked: \", clickedLatLng.lat, \", \", clickedLatLng.lng), selectedPlace && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Selected Marker: \", selectedPlace.id));\n  };\n\n  return isLoaded ? renderMap() : null;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/Users/miguelgalarraga/googlemapreact/src/App.js"],"names":["React","useState","Fragment","ReactDOM","useLoadScript","GoogleMap","Marker","InfoWindow","App","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","clickedLatLng","setClickedLatLng","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","myPlaces","id","pos","fitBounds","map","bounds","window","google","maps","LatLngBounds","place","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","renderMap","getCenter","toJSON","e","latLng","height","width","path","fillColor","fillOpacity","strokeWeight","scale","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// We will use these things from the lib\n// https://react-google-maps-api-docs.netlify.com/\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"@react-google-maps/api\";\n\nfunction App() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [center, setCenter] = useState({ lat: 44.076613, lng: -98.362239833 });\n  const [zoom, setZoom] = useState(5);\n  const [clickedLatLng, setClickedLatLng] = useState(null);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key\n    googleMapsApiKey: \"\"\n  });\n\n  // The places I want to create markers for.\n  // This could be a data-driven prop.\n  const myPlaces = [\n    { id: \"place1\", pos: { lat: 39.09366509575983, lng: -94.58751660204751 } },\n    { id: \"place2\", pos: { lat: 39.10894664788252, lng: -94.57926449532226 } },\n    { id: \"place3\", pos: { lat: 39.07602397235644, lng: -94.5184089401211 } }\n  ];\n\n  // Iterate myPlaces to size, center, and zoom map to contain all markers\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myPlaces.map(place => {\n      bounds.extend(place.pos);\n      return place.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, place) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState, [place.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which place was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 13) {\n      setZoom(13);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const renderMap = () => {\n    return (\n      <Fragment>\n        <GoogleMap\n          // Do stuff on map initial laod\n          onLoad={loadHandler}\n          // Save the current center position in state\n          onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n          // Save the user's map click position\n          onClick={e => setClickedLatLng(e.latLng.toJSON())}\n          center={center}\n          zoom={zoom}\n          mapContainerStyle={{\n            height: \"70vh\",\n            width: \"100%\"\n          }}\n        >\n          {myPlaces.map(place => (\n            <Marker\n              key={place.id}\n              position={place.pos}\n              onLoad={marker => markerLoadHandler(marker, place)}\n              onClick={event => markerClickHandler(event, place)}\n              // Not required, but if you want a custom icon:\n              icon={{\n                path:\n                  \"M12.75 0l-2.25 2.25 2.25 2.25-5.25 6h-5.25l4.125 4.125-6.375 8.452v0.923h0.923l8.452-6.375 4.125 4.125v-5.25l6-5.25 2.25 2.25 2.25-2.25-11.25-11.25zM10.5 12.75l-1.5-1.5 5.25-5.25 1.5 1.5-5.25 5.25z\",\n                fillColor: \"#0000ff\",\n                fillOpacity: 1.0,\n                strokeWeight: 0,\n                scale: 1.25\n              }}\n            />\n          ))}\n\n          {infoOpen && selectedPlace && (\n            <InfoWindow\n              anchor={markerMap[selectedPlace.id]}\n              onCloseClick={() => setInfoOpen(false)}\n            >\n              <div>\n                <h3>{selectedPlace.id}</h3>\n                <div>This is your info window content</div>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n\n        {/* Our center position always in state */}\n        <h3>\n          Center {center.lat}, {center.lng}\n        </h3>\n\n        {/* Position of the user's map click */}\n        {clickedLatLng && (\n          <h3>\n            You clicked: {clickedLatLng.lat}, {clickedLatLng.lng}\n          </h3>\n        )}\n\n        {/* Position of the user's map click */}\n        {selectedPlace && <h3>Selected Marker: {selectedPlace.id}</h3>}\n      </Fragment>\n    );\n  };\n\n  return isLoaded ? renderMap() : null;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}