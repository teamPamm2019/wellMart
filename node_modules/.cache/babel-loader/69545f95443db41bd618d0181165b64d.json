{"ast":null,"code":"var _jsxFileName = \"/Users/miguelfernandez/Desktop/codingBootcamp/wellMart/src/pages/Discover.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\nimport Alert from \"../components/Alert\";\n\nclass Discover extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: \"\",\n      match: false,\n      matchCount: 0\n    };\n\n    this.handleBtnClick = event => {\n      // Get the data-value of the clicked button\n      const btnType = event.target.attributes.getNamedItem(\"data-value\").value; // Clone this.state to the newState object\n      // We'll modify this object and use it to set our component's state\n\n      const newState = { ...this.state\n      };\n\n      if (btnType === \"pick\") {\n        // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n        newState.match = 1 === Math.floor(Math.random() * 5) + 1; // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n\n        newState.matchCount = newState.match ? newState.matchCount + 1 : newState.matchCount;\n      } else {\n        // If we thumbs down'ed the dog, we haven't matched with it\n        newState.match = false;\n      } // Replace our component's state with newState, load the next dog image\n\n\n      this.setState(newState);\n      this.loadNextDog();\n    };\n\n    this.loadNextDog = () => {\n      API.getRandomDog().then(res => this.setState({\n        image: res.data.message\n      })).catch(err => console.log(err));\n    };\n  }\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    this.loadNextDog();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      class: \"col s7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Zip Code: \", React.createElement(\"input\", {\n      id: \"to-do\",\n      type: \"text\",\n      class: \"form-control\",\n      name: \"fullName\",\n      value: \" \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"add-to-do\",\n      class: \"btn waves-effect waves-light\",\n      value: \"submit\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Discover;","map":{"version":3,"sources":["/Users/miguelfernandez/Desktop/codingBootcamp/wellMart/src/pages/Discover.js"],"names":["React","Component","API","Card","Alert","Discover","state","image","match","matchCount","handleBtnClick","event","btnType","target","attributes","getNamedItem","value","newState","Math","floor","random","setState","loadNextDog","getRandomDog","then","res","data","message","catch","err","console","log","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BK,KAD+B,GACvB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,KADuB;;AAAA,SAY/BC,cAZ+B,GAYdC,KAAK,IAAI;AACxB;AACA,YAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,YAAxB,CAAqC,YAArC,EAAmDC,KAAnE,CAFwB,CAGxB;AACA;;AACA,YAAMC,QAAQ,GAAG,EAAE,GAAG,KAAKX;AAAV,OAAjB;;AAEA,UAAIM,OAAO,KAAK,MAAhB,EAAwB;AACtB;AACAK,QAAAA,QAAQ,CAACT,KAAT,GAAiB,MAAMU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAvD,CAFsB,CAItB;;AACAH,QAAAA,QAAQ,CAACR,UAAT,GAAsBQ,QAAQ,CAACT,KAAT,GAClBS,QAAQ,CAACR,UAAT,GAAsB,CADJ,GAElBQ,QAAQ,CAACR,UAFb;AAGD,OARD,MAQO;AACL;AACAQ,QAAAA,QAAQ,CAACT,KAAT,GAAiB,KAAjB;AACD,OAlBuB,CAmBxB;;;AACA,WAAKa,QAAL,CAAcJ,QAAd;AACA,WAAKK,WAAL;AACD,KAlC8B;;AAAA,SAoC/BA,WApC+B,GAoCjB,MAAM;AAClBpB,MAAAA,GAAG,CAACqB,YAAJ,GACGC,IADH,CACQC,GAAG,IACP,KAAKJ,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEkB,GAAG,CAACC,IAAJ,CAASC;AADJ,OAAd,CAFJ,EAMGC,KANH,CAMSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANhB;AAOD,KA5C8B;AAAA;;AAO/B;AACAG,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,WAAL;AACD;;AAoCDW,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgB;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,IAAI,EAAC,MAAvB;AAA8B,MAAA,KAAK,EAAC,cAApC;AAAmD,MAAA,IAAI,EAAC,UAAxD;AAAmE,MAAA,KAAK,EAAC,GAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM;AAAO,MAAA,EAAE,EAAC,WAAV;AAAsB,MAAA,KAAK,EAAC,8BAA5B;AAA2D,MAAA,KAAK,EAAC,QAAjE;AAA0E,MAAA,IAAI,EAAC,QAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAN,CAFF,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADF;AAaD;;AA5D8B;;AA+DjC,eAAe5B,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\nimport Alert from \"../components/Alert\";\n\nclass Discover extends Component {\n  state = {\n    image: \"\",\n    match: false,\n    matchCount: 0\n  };\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    this.loadNextDog();\n  }\n\n  handleBtnClick = event => {\n    // Get the data-value of the clicked button\n    const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\n    // Clone this.state to the newState object\n    // We'll modify this object and use it to set our component's state\n    const newState = { ...this.state };\n\n    if (btnType === \"pick\") {\n      // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n      newState.match = 1 === Math.floor(Math.random() * 5) + 1;\n\n      // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n      newState.matchCount = newState.match\n        ? newState.matchCount + 1\n        : newState.matchCount;\n    } else {\n      // If we thumbs down'ed the dog, we haven't matched with it\n      newState.match = false;\n    }\n    // Replace our component's state with newState, load the next dog image\n    this.setState(newState);\n    this.loadNextDog();\n  };\n\n  loadNextDog = () => {\n    API.getRandomDog()\n      .then(res =>\n        this.setState({\n          image: res.data.message\n        })\n      )\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div class=\"col s7\">\n          <form>\n            <span>Zip Code: <input id=\"to-do\" type=\"text\" class=\"form-control\" name=\"fullName\" value=\" \"></input></span>\n            <span><input id=\"add-to-do\" class=\"btn waves-effect waves-light\" value=\"submit\" type=\"submit\"></input></span>\n          </form>\n          <div>\n\n            \n          </div>\n      </div>\n\n    );\n  }\n}\n\nexport default Discover;\n"]},"metadata":{},"sourceType":"module"}